name: AI Auto-Repair

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-repair:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    # Choose language: python | node | java | go
    env:
      LANGUAGE: python
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      PROMPT_FILE: .ai-repair/ci.log

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------- Language setup ----------
      - name: Set up environment
        run: |
          if [ "$LANGUAGE" = "python" ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          elif [ "$LANGUAGE" = "node" ]; then
            npm install
          elif [ "$LANGUAGE" = "java" ]; then
            sudo apt-get update
            sudo apt-get install -y maven
            mvn install -DskipTests
          elif [ "$LANGUAGE" = "go" ]; then
            go mod tidy
          fi

      # ---------- Run tests ----------
      - name: Run tests and capture output
        id: tests
        continue-on-error: true
        run: |
          set -o pipefail
          mkdir -p .ai-repair
          if [ "$LANGUAGE" = "python" ]; then
            PYTHONPATH=src pytest -v 2>&1 | tee $PROMPT_FILE
          elif [ "$LANGUAGE" = "node" ]; then
            npm test 2>&1 | tee $PROMPT_FILE
          elif [ "$LANGUAGE" = "java" ]; then
            mvn test 2>&1 | tee $PROMPT_FILE
          elif [ "$LANGUAGE" = "go" ]; then
            go test ./... 2>&1 | tee $PROMPT_FILE
          fi


      # ---------- Install GitHub CLI + Copilot ----------
      - name: Install GitHub CLI and Copilot
        if: steps.tests.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          npm install -g @github/copilot
          gh extension install github/gh-copilot --force

      # ---------- AI Repair ----------
      - name: Run AI repair
        if: steps.tests.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git checkout -b copilot/fix-${{ github.run_id }}
          echo "Requesting patch from Copilot..."
          gh copilot suggest < $PROMPT_FILE > .ai-repair/patch.diff || true
          if [ -s .ai-repair/patch.diff ]; then
            git apply .ai-repair/patch.diff || true
          fi

      # ---------- Re-run tests ----------
      - name: Re-run tests to verify fix
        if: steps.tests.outcome == 'failure'
        run: |
          if [ "$LANGUAGE" = "python" ]; then
            PYTHONPATH=src pytest -v
          elif [ "$LANGUAGE" = "node" ]; then
            npm test
          elif [ "$LANGUAGE" = "java" ]; then
            mvn test
          elif [ "$LANGUAGE" = "go" ]; then
            go test ./...
          fi

      # ---------- Commit + push ----------
      - name: Commit and push fix
        if: steps.tests.outcome == 'failure'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A || true
          git commit -m "AI repair: Copilot patch for failed tests" || true
          git push origin HEAD || true

      # ---------- Create Pull Request ----------
      - name: Create Pull Request
        if: steps.tests.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr create --title "AI repair: Copilot patch for failed tests" \
            --body "This PR was auto-generated by AI repair after detecting failing tests." \
            --base main || true
